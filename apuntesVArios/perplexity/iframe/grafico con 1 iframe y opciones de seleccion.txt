Para crear un sistema en Go que genere diferentes tipos de gráficos (gráfico de barras, gráfico de líneas y gráfico circular) y los cargue en un iframe utilizando Memcached para almacenar el estado de los gráficos, puedes seguir el siguiente enfoque. Este ejemplo incluirá la selección de parámetros a través de formularios y la generación de gráficos dinámicos.
Estructura del Proyecto
Crea una carpeta para tu proyecto.
Dentro de esa carpeta, crea un archivo main.go y una carpeta llamada templates.
Instalación de Dependencias
Asegúrate de instalar las siguientes bibliotecas:
bash
go get -u github.com/go-echarts/go-echarts/v2
go get -u github.com/bradfitz/gomemcache/memcache

Archivo main.go
Este archivo contendrá el código del servidor y la lógica para manejar las solicitudes.
go
package main

import (
    "net/http"
    "math/rand"
    "github.com/go-echarts/go-echarts/v2/charts"
    "github.com/go-echarts/go-echarts/v2/opts"
    "github.com/bradfitz/gomemcache/memcache"
    "html/template"
)

var templates = template.Must(template.ParseFiles("templates/index.html"))

var mc *memcache.Client

func main() {
    mc = memcache.New("localhost:11211") // Conectar a Memcached
    http.HandleFunc("/", indexHandler)
    http.HandleFunc("/generate", generateChartHandler)
    http.ListenAndServe(":8080", nil)
}

func indexHandler(w http.ResponseWriter, r *http.Request) {
    templates.ExecuteTemplate(w, "index.html", nil)
}

func generateChartHandler(w http.ResponseWriter, r *http.Request) {
    // Obtener valores seleccionados
    chartType := r.FormValue("chartType")
    age := r.FormValue("age")
    gender := r.FormValue("gender")
    nationality := r.FormValue("nationality")

    var chartHTML string

    // Generar gráficos basados en el tipo seleccionado
    switch chartType {
    case "bar":
        chartHTML = renderBarChart(age, gender, nationality)
    case "line":
        chartHTML = renderLineChart(age, gender, nationality)
    case "pie":
        chartHTML = renderPieChart(age, gender, nationality)
    }

    // Almacenar en Memcached (opcional)
    mc.Set(&memcache.Item{Key: "chart_" + chartType, Value: []byte(chartHTML)})

    // Enviar el HTML del gráfico al cliente
    w.Header().Set("Content-Type", "text/html")
    w.Write([]byte(chartHTML))
}

func renderBarChart(age, gender, nationality string) string {
    bar := charts.NewBar()
    bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: "Gráfico de Barras"}))

    xAxis := []string{"Grupo 1", "Grupo 2", "Grupo 3"}
    bar.SetXAxis(xAxis).
        AddSeries("Datos", generateRandomData())

    return bar.RenderString()
}

func renderLineChart(age, gender, nationality string) string {
    line := charts.NewLine()
    line.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: "Gráfico de Líneas"}))

    xAxis := []string{"Enero", "Febrero", "Marzo"}
    line.SetXAxis(xAxis).
        AddSeries("Datos", generateRandomData())

    return line.RenderString()
}

func renderPieChart(age, gender, nationality string) string {
    pie := charts.NewPie()
    pie.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: "Gráfico Circular"}))

    pie.AddSeries("Datos", generatePieData())

    return pie.RenderString()
}

// Función para generar datos aleatorios para gráficos
func generateRandomData() []opts.BarData {
    items := make([]opts.BarData, 0)
    for i := 0; i < 3; i++ {
        items = append(items, opts.BarData{Value: rand.Intn(100)})
    }
    return items
}

// Función para generar datos para el gráfico circular
func generatePieData() []opts.PieData {
    items := make([]opts.PieData, 0)
    for i := 0; i < 3; i++ {
        items = append(items, opts.PieData{Name: "Categoría " + string(i+1), Value: rand.Intn(100)})
    }
    return items
}

Archivo index.html (en la carpeta templates)
Este archivo contendrá la estructura principal con los selectores y el botón para generar el gráfico.
xml
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generar Gráficos Dinámicos</title>
</head>
<body>

<h1>Generar Gráficos Dinámicos</h1>

<form id="chartForm">
   <label for="chartType">Tipo de Gráfico:</label>
   <select id="chartType" name="chartType">
       <option value="bar">Gráfico de Barras</option>
       <option value="line">Gráfico de Líneas</option>
       <option value="pie">Gráfico Circular</option>
   </select>

   <label for="age">Edad:</label>
   <select id="age" name="age">
       <option value="18-25">18-25</option>
       <option value="26-35">26-35</option>
       <option value="36-45">36-45</option>
       <option value="46+">46+</option>
   </select>

   <label for="gender">Género:</label>
   <select id="gender" name="gender">
       <option value="masculino">Masculino</option>
       <option value="femenino">Femenino</option>
       <option value="otro">Otro</option>
   </select>

   <label for="nationality">Nacionalidad:</label>
   <select id="nationality" name="nationality">
       <option value="nacionalidad1">Nacionalidad 1</option>
       <option value="nacionalidad2">Nacionalidad 2</option>
       <option value="nacionalidad3">Nacionalidad 3</option>
       <option value="nacionalidad4">Nacionalidad 4</option>
   </select>

   <button type="button" id="loadChart">Generar Gráfico</button>
</form>

<iframe id="chartFrame" style="width:80%; height:400px; border:none;"></iframe>

<script>
document.getElementById('loadChart').addEventListener('click', function() {
   const form = document.getElementById('chartForm');
   const formData = new FormData(form);
   
   fetch('/generate', {
       method: 'POST',
       body: formData,
   })
   .then(response => response.text())
   .then(data => {
       document.getElementById('chartFrame').srcdoc = data; // Cargar el gráfico en el iframe
   });
});
</script>

</body>
</html>

Cómo Funciona
Servidor Go:
El servidor escucha en el puerto 8080 y maneja dos rutas:
/: Sirve la página principal (index.html).
/generate: Genera gráficos basados en las selecciones del formulario.
Página Principal (index.html):
Contiene tres selectores (select) y un botón que permite al usuario seleccionar opciones.
Al hacer clic en el botón "Generar Gráfico", se envían los datos seleccionados al servidor mediante una solicitud POST.
Generación de Gráficos:
En el handler /generate, se generan gráficos (barras, líneas y pie) utilizando los valores seleccionados.
Los gráficos se renderizan como HTML y se devuelven al cliente.
Memcached:
Se conecta a Memcached para almacenar los gráficos generados (esto es opcional y puede ser implementado según tus necesidades).
Carga del Gráfico en el iframe:
El gráfico generado se carga dentro de un iframe utilizando srcdoc, lo que permite mostrar directamente el HTML generado.