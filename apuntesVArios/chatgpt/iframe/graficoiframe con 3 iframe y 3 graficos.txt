me gustaría que existieran 3 iframe que cuando se presione el boton "Generar Gráficos", cada grafico se carge en un ifreme diferente 
ChatGPT Plus
ChatGPT
Entendido, ahora actualizaremos el frontend y el backend para que los tres gráficos se carguen en iframes diferentes al presionar el botón "Generar Gráficos". Cada iframe estará asociado con un tipo específico de gráfico.

Backend Actualizado (main.go)
Vamos a ajustar el chartHandler para que acepte un parámetro adicional type, que define el tipo de gráfico a generar (barras, líneas o pastel).

go
Copiar código
package main

import (
	"crypto/md5"
	"fmt"
	"net/http"
	"strings"

	"github.com/bradfitz/gomemcache/memcache"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
)

var mc = memcache.New("127.0.0.1:11211")

// Genera datos para los gráficos
func generateData(base int) []opts.BarData {
	data := make([]opts.BarData, 0)
	for i := 1; i <= 5; i++ {
		data = append(data, opts.BarData{Value: base * i})
	}
	return data
}

// Genera un gráfico de barras
func createBarChart(title string, base int) *charts.Bar {
	bar := charts.NewBar()
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: title}))
	bar.SetXAxis([]string{"A", "B", "C", "D", "E"}).
		AddSeries("Series A", generateData(base))
	return bar
}

// Genera un gráfico de líneas
func createLineChart(title string, base int) *charts.Line {
	line := charts.NewLine()
	line.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: title}))
	line.SetXAxis([]string{"A", "B", "C", "D", "E"}).
		AddSeries("Series A", generateData(base))
	return line
}

// Genera un gráfico de pastel
func createPieChart(title string, base int) *charts.Pie {
	pie := charts.NewPie()
	pie.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: title}))

	data := make([]opts.PieData, 0)
	for i, v := range generateData(base) {
		data = append(data, opts.PieData{Name: fmt.Sprintf("Elemento %d", i+1), Value: v.Value})
	}

	pie.AddSeries("Categoría A", data)
	return pie
}

// Renderiza un gráfico según el tipo solicitado
func chartHandler(w http.ResponseWriter, r *http.Request) {
	chartType := r.URL.Query().Get("type") // Tipo de gráfico (bar, line, pie)
	params := r.URL.Query()["params"]     // Ejemplo: ?params=edad,30&params=genero,M

	// Crear un hash único para los parámetros y el tipo
	hash := fmt.Sprintf("%x", md5.Sum([]byte(strings.Join(params, "-")+chartType)))

	// Verificar si ya está en Memcached
	if item, err := mc.Get(hash); err == nil {
		w.Header().Set("Content-Type", "text/html")
		w.Write(item.Value)
		return
	}

	// Crear el gráfico basado en el tipo
	var sb strings.Builder
	switch chartType {
	case "bar":
		bar := createBarChart("Gráfico de Barras", len(params)*10)
		bar.Render(&sb)
	case "line":
		line := createLineChart("Gráfico de Líneas", len(params)*15)
		line.Render(&sb)
	case "pie":
		pie := createPieChart("Gráfico de Pie", len(params)*20)
		pie.Render(&sb)
	default:
		http.Error(w, "Tipo de gráfico no válido", http.StatusBadRequest)
		return
	}

	// Guardar en Memcached
	mc.Set(&memcache.Item{Key: hash, Value: []byte(sb.String())})

	// Enviar al cliente
	w.Header().Set("Content-Type", "text/html")
	w.Write([]byte(sb.String()))
}

func indexHandler(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "templates/index.html")
}

func main() {
	http.HandleFunc("/", indexHandler)
	http.HandleFunc("/chart", chartHandler)
	http.ListenAndServe(":8080", nil)
}
Frontend Actualizado (index.html)
El frontend ahora incluye tres iframes, uno para cada tipo de gráfico. Cada iframe recibe los parámetros seleccionados y el tipo correspondiente.

html
Copiar código
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Múltiples Gráficos en Iframes</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-family: Arial, sans-serif;
        }
        iframe {
            width: 90%;
            height: 400px;
            border: 1px solid #ccc;
            margin-top: 20px;
        }
        button, select {
            margin: 5px;
            padding: 10px;
        }
    </style>
</head>
<body>
    <h1>Generar Gráficos en Iframes</h1>

    <!-- Selectores para parámetros -->
    <label for="edad">Edad:</label>
    <select id="edad">
        <option value="20-30">20-30</option>
        <option value="30-40">30-40</option>
        <option value="40-50">40-50</option>
    </select>

    <label for="genero">Género:</label>
    <select id="genero">
        <option value="M">Masculino</option>
        <option value="F">Femenino</option>
    </select>

    <label for="nacionalidad">Nacionalidad:</label>
    <select id="nacionalidad">
        <option value="Chile">Chile</option>
        <option value="Argentina">Argentina</option>
        <option value="Perú">Perú</option>
    </select>

    <button id="loadCharts">Generar Gráficos</button>

    <!-- Iframes para los gráficos -->
    <iframe id="barChart"></iframe>
    <iframe id="lineChart"></iframe>
    <iframe id="pieChart"></iframe>

    <script>
        document.getElementById('loadCharts').addEventListener('click', function () {
            const edad = document.getElementById('edad').value;
            const genero = document.getElementById('genero').value;
            const nacionalidad = document.getElementById('nacionalidad').value;

            // Crear parámetros para enviar al backend
            const params = [
                `edad=${edad}`,
                `genero=${genero}`,
                `nacionalidad=${nacionalidad}`
            ].join("&params=");

            // Cargar gráficos en los iframes correspondientes
            document.getElementById('barChart').src = `/chart?type=bar&params=${params}`;
            document.getElementById('lineChart').src = `/chart?type=line&params=${params}`;
            document.getElementById('pieChart').src = `/chart?type=pie&params=${params}`;
        });
    </script>
</body>
</html>
Cambios Realizados
Backend:

Ahora el chartHandler genera un solo gráfico según el tipo (bar, line, pie) pasado como parámetro.
Los gráficos se cachean en Memcached con un hash que incluye el tipo y los parámetros seleccionados.
Frontend:

Se agregaron tres iframes para mostrar los gráficos.
Al presionar "Generar Gráficos", los parámetros seleccionados se envían al backend, y cada iframe muestra un tipo de gráfico diferente.
Resultado
Al presionar "Generar Gráficos":

Los parámetros seleccionados se envían al backend.
El backend genera un gráfico de barras, uno de líneas y uno de pastel.
Los gráficos se cargan en tres iframes diferentes.