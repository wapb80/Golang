Código actualizado
main.go
go
Copiar código
package main

import (
	"html/template"
	"net/http"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
)

var templates = template.Must(template.ParseFiles("templates/index.html"))

// Genera datos ficticios para el gráfico
func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: i * 10})
	}
	return items
}

// Handler para la página principal
func indexHandler(w http.ResponseWriter, r *http.Request) {
	templates.ExecuteTemplate(w, "index.html", nil)
}

// Handler para generar el gráfico
func chartHandler(w http.ResponseWriter, r *http.Request) {
	// Crear un gráfico de barras
	bar := charts.NewBar()
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: "Gráfico de Barras"}))
	bar.SetXAxis([]string{"Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"}).
		AddSeries("Categoría A", generateBarItems())

	// Renderizar el gráfico como HTML
	w.Header().Set("Content-Type", "text/html")
	bar.Render(w)
}

func main() {
	http.HandleFunc("/", indexHandler)
	http.HandleFunc("/chart", chartHandler) // Endpoint para el gráfico
	http.ListenAndServe(":8080", nil)
}
index.html
Actualizamos el botón para cargar el gráfico en el iframe.

html
Copiar código
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gráfico en iframe</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-family: Arial, sans-serif;
        }
        iframe {
            width: 80%;
            height: 400px;
            border: 1px solid #ccc;
            margin-top: 20px;
        }
        button {
            padding: 10px 15px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>Gráfico Dinámico en un iframe</h1>
    <button id="loadChart">Cargar Gráfico</button>
    <iframe id="chartFrame"></iframe>

    <script>
        document.getElementById('loadChart').addEventListener('click', function () {
            const iframe = document.getElementById('chartFrame');
            iframe.src = "/chart"; // Carga el gráfico generado por el backend
        });
    </script>
</body>
</html>
Explicación de los cambios
Generación del gráfico:

Usamos go-echarts para crear un gráfico de barras con datos ficticios.
El gráfico se genera en el endpoint /chart y se renderiza directamente como HTML.
Carga dinámica del gráfico:

El botón en index.html cambia el atributo src del iframe para apuntar al endpoint /chart, mostrando el gráfico generado dinámicamente.
Uso de estilos responsivos:

El iframe es configurado para ocupar el 80% del ancho de la página y adaptarse al contenido generado.
Resultado
Cuando accedas a http://localhost:8080, verás el botón para cargar el gráfico.
Al hacer clic en "Cargar Gráfico", se cargará un gráfico interactivo de barras en el iframe.
¿Te gustaría agregar funcionalidades adicionales, como más tipos de gráficos o datos dinámicos? 😊






Tú dijiste:
si , tengo en mente que el al presionar el boton id="loadChart", este tome las opciones seleccionadas en tres select diferentes ,por ejemplo edad, genero, nacionalidad , y esas valores los pase para generar el grafico, a demas quiero usar memcached para rederizar el grafico
ChatGPT Plus
ChatGPT
¡Claro! Vamos a extender tu aplicación para incluir:

Tres selectores (<select>): Para capturar las opciones de edad, género y nacionalidad.
Paso de datos al backend: Los valores seleccionados en los <select> serán enviados como parámetros al endpoint /chart.
Uso de Memcached: Para almacenar el gráfico generado y evitar regenerarlo si ya existe para la misma combinación de parámetros.
Modificaciones necesarias
Dependencias adicionales
Instala Memcached y la biblioteca para Go:

bash
Copiar código
go get github.com/bradfitz/gomemcache/memcache
Asegúrate de que el servicio de Memcached esté en ejecución:

bash
Copiar código
memcached -d -m 64 -p 11211
Backend actualizado (main.go)
go
Copiar código
package main

import (
	"crypto/md5"
	"fmt"
	"net/http"
	"strings"

	"github.com/bradfitz/gomemcache/memcache"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
)

var mc = memcache.New("127.0.0.1:11211")

// Genera datos ficticios para el gráfico según los parámetros
func generateBarItems(params map[string]string) []opts.BarData {
	// Lógica ficticia para generar datos con base en los parámetros
	items := make([]opts.BarData, 0)
	for i := 1; i <= 7; i++ {
		items = append(items, opts.BarData{Value: i * len(params["edad"])}) // Datos dinámicos
	}
	return items
}

// Crea un hash único para los parámetros
func generateHash(params map[string]string) string {
	data := fmt.Sprintf("%s-%s-%s", params["edad"], params["genero"], params["nacionalidad"])
	return fmt.Sprintf("%x", md5.Sum([]byte(data)))
}

// Genera un gráfico de barras basado en los parámetros
func createChart(params map[string]string) *charts.Bar {
	bar := charts.NewBar()
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: "Gráfico Dinámico"}))
	bar.SetXAxis([]string{"Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"}).
		AddSeries("Categoría A", generateBarItems(params))
	return bar
}

// Handler para la página principal
func indexHandler(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "templates/index.html")
}

// Handler para generar o recuperar el gráfico desde Memcached
func chartHandler(w http.ResponseWriter, r *http.Request) {
	params := map[string]string{
		"edad":         r.URL.Query().Get("edad"),
		"genero":       r.URL.Query().Get("genero"),
		"nacionalidad": r.URL.Query().Get("nacionalidad"),
	}

	// Generar un hash único basado en los parámetros
	hash := generateHash(params)

	// Intentar recuperar el gráfico desde Memcached
	if item, err := mc.Get(hash); err == nil {
		w.Header().Set("Content-Type", "text/html")
		w.Write(item.Value)
		return
	}

	// Generar el gráfico si no está en Memcached
	w.Header().Set("Content-Type", "text/html")
	bar := createChart(params)

	// Guardar el gráfico generado en Memcached
	var sb strings.Builder
	bar.Render(&sb)
	mc.Set(&memcache.Item{Key: hash, Value: []byte(sb.String())})

	// Renderizar el gráfico
	w.Write([]byte(sb.String()))
}

func main() {
	http.HandleFunc("/", indexHandler)
	http.HandleFunc("/chart", chartHandler)
	http.ListenAndServe(":8080", nil)
}
Frontend actualizado (index.html)
html
Copiar código
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gráfico con Parámetros</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-family: Arial, sans-serif;
        }
        iframe {
            width: 80%;
            height: 400px;
            border: 1px solid #ccc;
            margin-top: 20px;
        }
        button {
            padding: 10px 15px;
            font-size: 16px;
            cursor: pointer;
        }
        select {
            margin: 5px;
            padding: 5px;
        }
    </style>
</head>
<body>
    <h1>Generar Gráfico con Parámetros</h1>

    <!-- Selectores -->
    <label for="edad">Edad:</label>
    <select id="edad">
        <option value="20-30">20-30</option>
        <option value="30-40">30-40</option>
        <option value="40-50">40-50</option>
    </select>

    <label for="genero">Género:</label>
    <select id="genero">
        <option value="M">Masculino</option>
        <option value="F">Femenino</option>
    </select>

    <label for="nacionalidad">Nacionalidad:</label>
    <select id="nacionalidad">
        <option value="Chile">Chile</option>
        <option value="Argentina">Argentina</option>
        <option value="Perú">Perú</option>
    </select>

    <button id="loadChart">Cargar Gráfico</button>
    <iframe id="chartFrame"></iframe>

    <script>
        document.getElementById('loadChart').addEventListener('click', function () {
            const edad = document.getElementById('edad').value;
            const genero = document.getElementById('genero').value;
            const nacionalidad = document.getElementById('nacionalidad').value;

            const iframe = document.getElementById('chartFrame');
            iframe.src = `/chart?edad=${edad}&genero=${genero}&nacionalidad=${nacionalidad}`;
        });
    </script>
</body>
</html>
Explicación de los cambios
Selectores y parámetros:

El usuario selecciona valores de edad, género y nacionalidad. Estos valores se envían como parámetros en la URL (/chart?edad=...&genero=...&nacionalidad=...).
Memcached:

Cada combinación de parámetros genera un hash único.
Si el hash existe en Memcached, se devuelve el gráfico almacenado sin regenerarlo.
Si no existe, se genera un gráfico nuevo y se guarda en Memcached.
Gráfico dinámico:

Los datos del gráfico varían según los parámetros seleccionados.
Ventajas
Desempeño mejorado: Usar Memcached evita recalcular gráficos idénticos.
Interactividad: El usuario puede generar gráficos dinámicos basados en sus selecciones.