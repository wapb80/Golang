Backend Actualizado con Gorutinas
A continuación, integro gorutinas en la generación de gráficos. Cada gráfico será procesado de manera concurrente:

go
Copiar código
package main

import (
	"fmt"
	"net/http"
	"strings"
	"sync"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
)

// Función para generar datos de ejemplo
func generateData(base int) []opts.BarData {
	data := make([]opts.BarData, 0)
	for i := 1; i <= 5; i++ {
		data = append(data, opts.BarData{Value: base * i})
	}
	return data
}

// Crear gráfico de barras
func createBarChart(title string, base int) *charts.Bar {
	bar := charts.NewBar()
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: title}))
	bar.SetXAxis([]string{"A", "B", "C", "D", "E"}).
		AddSeries("Series A", generateData(base))
	return bar
}

// Crear gráfico de líneas
func createLineChart(title string, base int) *charts.Line {
	line := charts.NewLine()
	line.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: title}))
	line.SetXAxis([]string{"A", "B", "C", "D", "E"}).
		AddSeries("Series A", generateData(base))
	return line
}

// Crear gráfico de pastel
func createPieChart(title string, base int) *charts.Pie {
	pie := charts.NewPie()
	pie.SetGlobalOptions(charts.WithTitleOpts(opts.Title{Title: title}))

	data := make([]opts.PieData, 0)
	for i, v := range generateData(base) {
		data = append(data, opts.PieData{Name: fmt.Sprintf("Elemento %d", i+1), Value: v.Value})
	}

	pie.AddSeries("Categoría A", data)
	return pie
}

// Renderizar gráficos concurrentemente
func chartHandler(w http.ResponseWriter, r *http.Request) {
	chartType := r.URL.Query().Get("type") // Tipo de gráfico (bar, line, pie)
	params := r.URL.Query()["params"]     // Ejemplo: ?params=edad,30&params=genero,M

	// Usaremos un waitgroup para coordinar las gorutinas
	var wg sync.WaitGroup
	var sb strings.Builder
	errCh := make(chan error, 1) // Canal para manejar errores

	wg.Add(1)
	go func() {
		defer wg.Done()
		switch chartType {
		case "bar":
			bar := createBarChart("Gráfico de Barras", len(params)*10)
			bar.Render(&sb)
		case "line":
			line := createLineChart("Gráfico de Líneas", len(params)*15)
			line.Render(&sb)
		case "pie":
			pie := createPieChart("Gráfico de Pie", len(params)*20)
			pie.Render(&sb)
		default:
			errCh <- fmt.Errorf("Tipo de gráfico no válido")
		}
	}()

	// Esperar a que todas las gorutinas terminen
	wg.Wait()
	close(errCh)

	// Manejo de errores
	if err := <-errCh; err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// Enviar al cliente
	w.Header().Set("Content-Type", "text/html")
	w.Write([]byte(sb.String()))
}

func indexHandler(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "templates/index.html")
}

func main() {
	http.HandleFunc("/", indexHandler)
	http.HandleFunc("/chart", chartHandler)
	http.ListenAndServe(":8080", nil)
}
Detalles del Código
Gorutinas por gráfico:

Cada tipo de gráfico se procesa dentro de una gorutina utilizando un sync.WaitGroup para esperar a que todas finalicen.
Canal para errores:

Si ocurre un error durante la creación de un gráfico, se envía al canal errCh y se maneja adecuadamente.
Concurrente pero controlado:

Aunque se usan gorutinas, se asegura que solo un gráfico sea generado por solicitud, manteniendo el flujo consistente.
Frontend (index.html)
El frontend no requiere cambios adicionales y sigue usando tres iframes para los gráficos.

html
Copiar código
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Múltiples Gráficos en Iframes</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-family: Arial, sans-serif;
        }
        iframe {
            width: 90%;
            height: 400px;
            border: 1px solid #ccc;
            margin-top: 20px;
        }
        button, select {
            margin: 5px;
            padding: 10px;
        }
    </style>
</head>
<body>
    <h1>Generar Gráficos en Iframes</h1>

    <label for="edad">Edad:</label>
    <select id="edad">
        <option value="20-30">20-30</option>
        <option value="30-40">30-40</option>
        <option value="40-50">40-50</option>
    </select>

    <label for="genero">Género:</label>
    <select id="genero">
        <option value="M">Masculino</option>
        <option value="F">Femenino</option>
    </select>

    <label for="nacionalidad">Nacionalidad:</label>
    <select id="nacionalidad">
        <option value="Chile">Chile</option>
        <option value="Argentina">Argentina</option>
        <option value="Perú">Perú</option>
    </select>

    <button id="loadCharts">Generar Gráficos</button>

    <iframe id="barChart"></iframe>
    <iframe id="lineChart"></iframe>
    <iframe id="pieChart"></iframe>

    <script>
        document.getElementById('loadCharts').addEventListener('click', function () {
            const edad = document.getElementById('edad').value;
            const genero = document.getElementById('genero').value;
            const nacionalidad = document.getElementById('nacionalidad').value;

            // Crear parámetros para enviar al backend
            const params = [
                `edad=${edad}`,
                `genero=${genero}`,
                `nacionalidad=${nacionalidad}`
            ].join("&params=");

            // Cargar gráficos en los iframes correspondientes
            document.getElementById('barChart').src = `/chart?type=bar&params=${params}`;
            document.getElementById('lineChart').src = `/chart?type=line&params=${params}`;
            document.getElementById('pieChart').src = `/chart?type=pie&params=${params}`;
        });
    </script>
</body>
</html>